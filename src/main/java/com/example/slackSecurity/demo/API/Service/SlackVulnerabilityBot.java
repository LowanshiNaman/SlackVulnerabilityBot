package com.example.slackSecurity.demo.API.Service;

import com.example.slackSecurity.demo.API.Model.Vulnerability;
import com.slack.api.Slack;
import com.slack.api.methods.SlackApiException;
import com.slack.api.methods.request.chat.ChatPostMessageRequest;
import com.slack.api.methods.response.chat.ChatPostMessageResponse;
import com.slack.api.model.block.ActionsBlock;
import com.slack.api.model.block.DividerBlock;
import com.slack.api.model.block.SectionBlock;
import com.slack.api.model.block.composition.OptionObject;
import com.slack.api.model.block.composition.PlainTextObject;
import com.slack.api.model.block.element.ButtonElement;
import com.slack.api.model.block.element.StaticSelectElement;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.jetbrains.annotations.Nullable;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

public class SlackVulnerabilityBot {

    private static final String SLACK_TOKEN = "xoxb-7442358977761-Your_token";
    private static final String NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/1.0";

    public static void main(String[] args) {
        List<Vulnerability> vulnerabilities = fetchNewVulnerabilities();
        vulnerabilities.forEach(SlackVulnerabilityBot::sendSlackMessage);
    }

    private static List<Vulnerability> fetchNewVulnerabilities() {
        HttpClient httpClient = HttpClients.createDefault();
        HttpGet request = new HttpGet(NVD_API_URL);
        request.setHeader("User-Agent", "Java SlackVulnerabilityBot");
        request.setHeader("Accept", "application/json");

        try {
            HttpResponse response = httpClient.execute(request);

            List<Vulnerability> vulnerabilities = getVulnerabilities(response);
            if (vulnerabilities != null) return vulnerabilities;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return List.of();
    }

    private static List<Vulnerability> getVulnerabilities(HttpResponse response) throws IOException {
        if (response.getStatusLine().getStatusCode() == 200) {
            //Expected JSON response
            String jsonResponse = EntityUtils.toString(response.getEntity());
            // fetching the JSON response for debugging purposes.
            System.out.println("Received JSON response: " + jsonResponse);
//            JsonObject jsonObject = JsonParser.parseString(jsonResponse).getAsJsonObject();
//            JsonArray cveItems = jsonObject.getAsJsonArray("CVE_Items");
//
//            List<Vulnerability> vulnerabilities = new ArrayList<>();
//
//            for (int i = 0; i < cveItems.size(); i++) {
//                JsonObject cveItem = cveItems.get(i).getAsJsonObject();
//                JsonObject cve = cveItem.getAsJsonObject("cve");
//                JsonObject description = cve.getAsJsonObject("description");
//                JsonArray descriptionData = description.getAsJsonArray("description_data");
//                String descriptionText = descriptionData.get(0).getAsJsonObject().get("value").getAsString();
//
//                Vulnerability vulnerability = new Vulnerability();
//                vulnerability.setDescription(descriptionText);
//                vulnerabilities.add(vulnerability);
//            }
//
//            return vulnerabilities;
        } else {
            System.err.println("Failed to fetch vulnerabilities. Status code: " + response.getStatusLine().getStatusCode());
            System.err.println("Response body: " + EntityUtils.toString(response.getEntity()));
        }
        return null;
    }


    private static void sendSlackMessage(Vulnerability vulnerability) {
        Slack slack = Slack.getInstance();
        try {
            ChatPostMessageRequest request = ChatPostMessageRequest.builder()
                    .token(SLACK_TOKEN)
                    .channel("#vulnerabilities")
                    .text("New Vulnerability Detected")
                    .blocks(Arrays.asList(
                            SectionBlock.builder()
                                    .text(PlainTextObject.builder().text(vulnerability.getDescription()).build())
                                    .build(),
                            DividerBlock.builder().build(),
                            ActionsBlock.builder()
                                    .elements(Arrays.asList(
                                            StaticSelectElement.builder()
                                                    .actionId("teamMembers")
                                                    .placeholder(PlainTextObject.builder().text("Select team members").build())
                                                    .options(Arrays.asList(
                                                            OptionObject.builder().text(PlainTextObject.builder().text("Member 1").build()).value("member1").build(),
                                                            OptionObject.builder().text(PlainTextObject.builder().text("Member 2").build()).value("member2").build()
                                                    ))
                                                    .build(),
                                            ButtonElement.builder()
                                                    .text(PlainTextObject.builder().text("Forward").build())
                                                    .actionId("forwardButton")
                                                    .build()
                                    ))
                                    .build()
                    ))
                    .build();

            ChatPostMessageResponse response = slack.methods().chatPostMessage(request);
            System.out.println("Message sent to Slack: " + response.getMessage().getText());
        } catch (IOException | SlackApiException e) {
            e.printStackTrace();
        }
    }
}
